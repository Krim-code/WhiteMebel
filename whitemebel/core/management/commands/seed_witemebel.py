import random
from io import BytesIO
from pathlib import Path
from core.utils.slug import ascii_slug

from django.core.files.base import ContentFile
from django.core.management.base import BaseCommand
from faker import Faker
from PIL import Image, ImageDraw
import uuid
from django.db import IntegrityError, transaction
from django.core.management.base import CommandError

from core.models import (
    Category, Color, Tag, Product, ProductImage,
    ProductAttribute, AttributeOption, ProductAttributeValue,
    Collection, Service, MainSlider,
    DeliveryRegion, DeliveryDiscount
)

fake = Faker("ru_RU")

ROOT_CATS = [
    ("–®–∫–∞—Ñ—ã-–∫—É–ø–µ", ["–î–≤—É—Ö–¥–≤–µ—Ä–Ω—ã–µ", "–¢—Ä—ë—Ö–¥–≤–µ—Ä–Ω—ã–µ", "–£–≥–ª–æ–≤—ã–µ"]),
    ("–†–∞—Å–ø–∞—à–Ω—ã–µ —à–∫–∞—Ñ—ã", ["–î–≤—É—Ö–¥–≤–µ—Ä–Ω—ã–µ", "–ß–µ—Ç—ã—Ä—ë—Ö–¥–≤–µ—Ä–Ω—ã–µ"]),
    ("–ì–∞—Ä–¥–µ—Ä–æ–±–Ω—ã–µ", ["–ü-–æ–±—Ä–∞–∑–Ω—ã–µ", "–£–≥–ª–æ–≤—ã–µ"]),
    ("–ü—Ä–∏—Ö–æ–∂–∏–µ", ["–°–µ–∫—Ü–∏–∏", "–ö–æ–º–ø–ª–µ–∫—Ç—ã"]),
    ("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", ["–ü–æ–ª–∫–∏", "–ö–æ—Ä–∑–∏–Ω—ã"]),
]

# –∏–º—è: (–æ–ø—Ü–∏–∏, –≤–∏–¥–∂–µ—Ç, –º—É–ª—å—Ç–∏?)
ATTRS = {
    "–ú–∞—Ç–µ—Ä–∏–∞–ª": (["–õ–î–°–ü", "–ú–î–§", "–î–µ—Ä–µ–≤–æ", "–ú–µ—Ç–∞–ª–ª", "–ü–ª–∞—Å—Ç–∏–∫"], "checkbox", True),
    "–¢–∏–ø –¥–≤–µ—Ä–µ–π": (["–†–∞—Å–ø–∞—à–Ω—ã–µ", "–ö—É–ø–µ"], "radio", False),
    "–ó–µ—Ä–∫–∞–ª–æ": (["–ù–µ—Ç", "–ù–∞ –æ–¥–Ω–æ–π –¥–≤–µ—Ä–∏", "–ù–∞ –≤—Å–µ—Ö –¥–≤–µ—Ä—è—Ö"], "radio", False),
    "–°—Ç–∏–ª—å": (["–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–ö–ª–∞—Å—Å–∏–∫–∞", "–õ–æ—Ñ—Ç", "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º"], "chips", True),
    "–§—É—Ä–Ω–∏—Ç—É—Ä–∞": (["Blum", "Hettich", "Boyard"], "select", True),
}

COLORS = [
    ("–ë–µ–ª—ã–π", "#FFFFFF"), ("–í–µ–Ω–≥–µ", "#4A2C2A"), ("–î—É–± –°–æ–Ω–æ–º–∞", "#C0A078"),
    ("–ß—ë—Ä–Ω—ã–π", "#000000"), ("–°–µ—Ä—ã–π", "#B0B0B0"), ("–ì—Ä–∞—Ñ–∏—Ç", "#2F3136"),
]

TAGS = ["–Ω–æ–≤–∏–Ω–∫–∞", "—Ö–∏—Ç", "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞", "—ç–∫—Å–∫–ª—é–∑–∏–≤", "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π-–∑–∞–∫–∞–∑"]

COLLECTIONS = ["Basic", "Premium", "Eco"]

SERVICES = [
    ("–î–æ—Å—Ç–∞–≤–∫–∞", 1500.00),
    ("–°–±–æ—Ä–∫–∞", 2500.00),
]

REGIONS = [
    ("–ú–æ—Å–∫–≤–∞ –∏ –ú–û", "moscow-mo", 1500.00, 50000.00, (1, 3)),
    ("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "spb", 1500.00, 50000.00, (2, 4)),
    ("–¶–§–û", "cfo", 2000.00, 60000.00, (3, 6)),
    ("–ü–æ–≤–æ–ª–∂—å–µ", "povolzhe", 2500.00, 70000.00, (4, 8)),
    ("–°–∏–±–∏—Ä—å", "sibir", 4000.00, 90000.00, (6, 12)),
]

DISCOUNTS = [
    ("-10% –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤—Å–µ–º", None, "percent", 10, 30000),
    ("-500‚ÇΩ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –ú–û", "moscow-mo", "fixed", 500, 0),
]


def make_placeholder_bytes(text="WhiteMebel"):
    img = Image.new("RGB", (1200, 800), (242, 242, 242))
    d = ImageDraw.Draw(img)
    d.rectangle([(10, 10), (1190, 790)], outline=(40, 40, 40), width=3)
    d.text((40, 40), text, fill=(30, 30, 30))
    buf = BytesIO()
    img.save(buf, format="JPEG", quality=85)
    return buf.getvalue()


IMG_BYTES = make_placeholder_bytes()


def cf(name="placeholder.jpg"):
    # –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–π ContentFile, —á—Ç–æ–±—ã Django –Ω–µ —Ä—É–≥–∞–ª—Å—è
    return ContentFile(IMG_BYTES, name=name)


def unique_slug(base, existing_qs, field="slug"):
    s = ascii_slug(base)
    if not s:
        s = "item"
    original = s
    i = 2
    while existing_qs.filter(**{field: s}).exists():
        s = f"{original}-{i}"
        i += 1
    return s



def make_sku(prefix="WM"):
    # –ß–∏—Å—Ç–æ —Ü–∏—Ñ—Ä—ã? –¢–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
    return f"{prefix}-{random.randint(100000, 999999)}"

def generate_unique_sku(used, prefix="WM", max_tries=20):
    # 1) –±—ã—Å—Ç—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ –ø–∞–º—è—Ç–∏ + –ë–î
    for _ in range(max_tries):
        sku = make_sku(prefix)
        if sku in used:
            continue
        if not Product.objects.filter(sku=sku).exists():
            used.add(sku)
            return sku
    # 2) fallback ‚Äî –≤–æ–æ–±—â–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
    alt = f"{prefix}-{uuid.uuid4().hex[:8].upper()}"
    used.add(alt)
    return alt


class Command(BaseCommand):
    help = "–ì–µ–Ω–µ—Ä–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è WhiteMebel (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ–≤–∞—Ä—ã, –∞—Ç—Ä–∏–±—É—Ç—ã, —Å–ª–∞–π–¥–µ—Ä—ã –∏ —Ç.–¥.)"

    def add_arguments(self, parser):
        parser.add_argument("--products", type=int, default=150, help="–°–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞—Ç—å (100-200 –æ–∫)")
        parser.add_argument("--fresh", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π")

    def handle(self, *args, **opts):
        products_count = max(1, int(opts["products"]))
        fresh = opts["fresh"]

        if fresh:
            self.stdout.write("üí£ –ß–∏—â—É –¥–∞–Ω–Ω—ã–µ‚Ä¶")
            ProductImage.objects.all().delete()
            ProductAttributeValue.objects.all().delete()
            Product.objects.all().delete()
            Tag.objects.all().delete()
            Color.objects.all().delete()
            AttributeOption.objects.all().delete()
            ProductAttribute.objects.all().delete()
            Collection.objects.all().delete()
            Service.objects.all().delete()
            MainSlider.objects.all().delete()
            DeliveryDiscount.objects.all().delete()
            DeliveryRegion.objects.all().delete()
            # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–æ–≥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏
            Category.objects.all().delete()

        self.stdout.write("üå≤ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏‚Ä¶")
        for root_name, children in ROOT_CATS:
            root = Category.objects.create(
                name=root_name,
                slug=unique_slug(root_name, Category.objects),
                is_featured=random.choice([True, False, False]),
            )
            for child in children:
                Category.objects.create(
                    name=child,
                    slug=unique_slug(f"{root_name}-{child}", Category.objects),
                    parent=root,
                )
        # –ø–æ–¥–ø—Ä–∞–≤–∏–º MPTT –∏–Ω–¥–µ–∫—Å—ã
        try:
            Category.objects.rebuild()
        except AttributeError:
            # —Å—Ç–∞—Ä—ã–µ/–∫–∞–ø—Ä–∏–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
            Category._tree_manager.rebuild()

        self.stdout.write("üé® –¶–≤–µ—Ç–∞‚Ä¶")
        for name, hx in COLORS:
            Color.objects.get_or_create(name=name, defaults={"hex_code": hx})

        self.stdout.write("üè∑ –¢–µ–≥–∏‚Ä¶")
        HOME_TAGS = {"–Ω–æ–≤–∏–Ω–∫–∞", "—Ö–∏—Ç"}
        for t in TAGS:
            # –ø–µ—Ä–≤–∏—á–Ω—ã–π slug-–∫–∞–Ω–¥–∏–¥–∞—Ç (ASCII + —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã)
            slug_candidate = unique_slug(t, Tag.objects)

            tag, created = Tag.objects.get_or_create(
                name=t,
                defaults={
                    "slug": slug_candidate,
                    "show_on_home": (t in HOME_TAGS),
                },
            )
            if not created:
                # –ª–µ—á–∏–º –ø—É—Å—Ç—ã–µ/–∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ/–ª–µ–≤—ã–µ —Å–ª–∞–≥–∏ —É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–≥–æ–≤
                # –≤–∞–∂–Ω–æ–µ: –∏—Å–∫–ª—é—á–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç –∏–∑ –≤—ã–±–æ—Ä–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                fixed_slug = unique_slug(tag.name, Tag.objects.exclude(pk=tag.pk))
                updates = []

                if not tag.slug or tag.slug != fixed_slug:
                    tag.slug = fixed_slug
                    updates.append("slug")

                # –µ—Å–ª–∏ —Ñ–ª–∞–≥ –µ—â—ë –Ω–µ —Ç—Ä–æ–≥–∞–ª–∏ ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç—ã (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ)
                if tag.show_on_home is None:  # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤ –ë–î NULL
                    tag.show_on_home = (tag.name in HOME_TAGS)
                    updates.append("show_on_home")

                if updates:
                    tag.save(update_fields=updates)

        self.stdout.write("‚öôÔ∏è  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –æ–ø—Ü–∏–∏‚Ä¶")
        attr_map = {}
        for idx, (attr_name, (options, widget, mult)) in enumerate(ATTRS.items()):
            attr, created = ProductAttribute.objects.get_or_create(
                name=attr_name,
                defaults={
                    "filter_widget": widget,
                    "is_multiselect": mult,
                    "show_in_filter": True,
                    "filter_order": idx,
                    "slug":unique_slug(attr_name, ProductAttribute.objects),
                },
            )
            # –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±–Ω–æ–≤–∏–º —Å—Ç–∏–ª—å
            changed = False
            if hasattr(attr, "filter_widget") and attr.filter_widget != widget:
                attr.filter_widget = widget
                changed = True
            if hasattr(attr, "is_multiselect") and attr.is_multiselect != mult:
                attr.is_multiselect = mult
                changed = True
            if changed:
                attr.save(update_fields=["filter_widget", "is_multiselect"])
            attr_map[attr_name] = attr

            for opt in options:
                AttributeOption.objects.get_or_create(attribute=attr, value=opt)

        self.stdout.write("üß∫ –ö–æ–ª–ª–µ–∫—Ü–∏–∏‚Ä¶")
        collections = [
            Collection.objects.get_or_create(title=c, defaults={"slug": unique_slug(c, Collection.objects)})[0]
            for c in COLLECTIONS
        ]

        self.stdout.write("üß∞ –°–µ—Ä–≤–∏—Å—ã‚Ä¶")
        for title, price in SERVICES:
            Service.objects.get_or_create(name=title, defaults={"price": price, "description": ""})

        self.stdout.write("üöö –†–µ–≥–∏–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏‚Ä¶")
        slug2region = {}
        for title, slug, base_cost, free_thr, (dmin, dmax) in REGIONS:
            r = DeliveryRegion.objects.create(
                name=title,
                slug=slug,
                base_cost=base_cost,
                free_threshold=free_thr,
                delivery_days_min=dmin,
                delivery_days_max=dmax,
            )
            slug2region[slug] = r

        self.stdout.write("üè∑ –°–∫–∏–¥–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É‚Ä¶")
        for title, reg_slug, tp, val, min_total in DISCOUNTS:
            DeliveryDiscount.objects.create(
                title=title,
                region=slug2region.get(reg_slug) if reg_slug else None,
                discount_type=tp,
                value=val,
                min_order_total=min_total,
            )

        self.stdout.write("üñº –°–ª–∞–π–¥–µ—Ä‚Ä¶")
        for i in range(3):
            MainSlider.objects.create(
                title=f"–°–ª–∞–π–¥ {i+1}",
                image=cf(f"slide_{i+1}.jpg"),
                link="",
                order=i,
                is_active=True,
            )

        self.stdout.write(f"üì¶ –ì–µ–Ω–µ—Ä—é —Ç–æ–≤–∞—Ä—ã: {products_count} —à—Ç‚Ä¶")
        all_colors = list(Color.objects.all())
        all_tags = list(Tag.objects.all())
        leaf_categories = list(Category.objects.filter(children__isnull=True)) or list(Category.objects.all())
        used_skus = set(Product.objects.values_list("sku", flat=True))
        created_products = []
        for _ in range(products_count):
            cat = random.choice(leaf_categories)
            base_title = f"{cat.name} {fake.word().capitalize()} {random.randint(100, 999)}"
            p_slug = unique_slug(base_title, Product.objects)
            price = random.randint(12000, 120000)
            has_disc = random.random() < 0.35
            disc = round(price * random.uniform(0.85, 0.97), 2) if has_disc else None
            color = random.choice(all_colors)
            sku = generate_unique_sku(used_skus, prefix="WM")

            p = Product(
                title=base_title,
                slug=p_slug,
                description=fake.paragraph(nb_sentences=3),
                price=price,
                discount_price=disc,
                sku=sku,
                is_active=True,
                stock=random.randint(0, 50),
                width=random.choice([60, 80, 100, 120, 150, 180]),
                height=random.choice([200, 210, 220, 240]),
                depth=random.choice([40, 45, 50, 60]),
                color=color,
                category=cat,
            )
            p.image = cf(f"{p_slug}.jpg")
            p.save()
            created_products.append(p)
            
            for attempt in range(3):
                try:
                    with transaction.atomic():
                        p.save()
                    break
                except IntegrityError as e:
                    if "core_product_sku_key" in str(e) and attempt < 2:
                        # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º SKU –∏ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
                        sku = generate_unique_sku(used_skus, prefix="WM")
                        p.sku = sku
                        continue
                    raise
                        
            # —Ç–µ–≥–∏
            if all_tags:
                k = random.randint(0, min(3, len(all_tags)))
                if k:
                    p.tags.add(*random.sample(all_tags, k=k))

            # –¥–æ–ø. –∫–∞—Ä—Ç–∏–Ω–∫–∞
            ProductImage.objects.create(product=p, image=cf(f"{p_slug}_1.jpg"), alt_text=p.title)

            # –∞—Ç—Ä–∏–±—É—Ç—ã (—É—Å—Ç–æ–π—á–∏–≤–æ –∫ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω—É)
            for attr_name in ATTRS.keys():
                attr = attr_map.get(attr_name) or ProductAttribute.objects.filter(name=attr_name).first()
                if not attr:
                    continue
                opt = AttributeOption.objects.filter(attribute=attr).order_by("?").first()
                if not opt:
                    continue
                ProductAttributeValue.objects.get_or_create(product=p, attribute=attr, option=opt)

        # –Ω–µ–º–Ω–æ–∂–∫–æ —Å–≤—è–∑–æ–∫ –ø–æ —Ü–≤–µ—Ç—É/related
        self.stdout.write("üîó –õ–∏–Ω–∫—É—é —Ç–æ–≤–∞—Ä—ã –º–µ–∂–¥—É —Å–æ–±–æ–π‚Ä¶")
        id_to_product = {p.id: p for p in created_products}
        by_color = {}
        for p in created_products:
            by_color.setdefault(p.color_id, []).append(p.id)

        for ids in by_color.values():
            if len(ids) < 2:
                continue
            sample_ids = random.sample(ids, k=min(4, len(ids)))
            for pid in sample_ids:
                prod = id_to_product[pid]
                others_ids = [oid for oid in sample_ids if oid != pid]
                others_objs = [id_to_product[oid] for oid in others_ids]
                prod.related_products.add(*others_objs)
                prod.related_by_color.add(*others_objs)

        # —Ä–∞—Å–∫–∏–¥–∞–µ–º –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
        for p in created_products:
            p.collections.add(random.choice(collections))

        self.stdout.write(self.style.SUCCESS(f"–ì–æ—Ç–æ–≤–æ. –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(created_products)}"))
